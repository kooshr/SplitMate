{"ast":null,"code":"var _objectSpread = require(\"/Users/kaush/Desktop/SplitMate/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = page => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n  if (page.blocks) {\n    page.blocks.forEach(block => {\n      block.paragraphs.forEach(paragraph => {\n        paragraph.lines.forEach(line => {\n          line.words.forEach(word => {\n            word.symbols.forEach(sym => {\n              symbols.push(_objectSpread(_objectSpread({}, sym), {}, {\n                page,\n                block,\n                paragraph,\n                line,\n                word\n              }));\n            });\n            words.push(_objectSpread(_objectSpread({}, word), {}, {\n              page,\n              block,\n              paragraph,\n              line\n            }));\n          });\n          lines.push(_objectSpread(_objectSpread({}, line), {}, {\n            page,\n            block,\n            paragraph\n          }));\n        });\n        paragraphs.push(_objectSpread(_objectSpread({}, paragraph), {}, {\n          page,\n          block\n        }));\n      });\n      blocks.push(_objectSpread(_objectSpread({}, block), {}, {\n        page\n      }));\n    });\n  }\n  return _objectSpread(_objectSpread({}, page), {}, {\n    blocks,\n    paragraphs,\n    lines,\n    words,\n    symbols\n  });\n};","map":{"version":3,"names":["module","exports","page","blocks","paragraphs","lines","words","symbols","forEach","block","paragraph","line","word","sym","push","_objectSpread"],"sources":["/Users/kaush/Desktop/SplitMate/node_modules/tesseract.js/src/utils/circularize.js"],"sourcesContent":["/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  if (page.blocks) {\n    page.blocks.forEach((block) => {\n      block.paragraphs.forEach((paragraph) => {\n        paragraph.lines.forEach((line) => {\n          line.words.forEach((word) => {\n            word.symbols.forEach((sym) => {\n              symbols.push({\n                ...sym, page, block, paragraph, line, word,\n              });\n            });\n            words.push({\n              ...word, page, block, paragraph, line,\n            });\n          });\n          lines.push({\n            ...line, page, block, paragraph,\n          });\n        });\n        paragraphs.push({\n          ...paragraph, page, block,\n        });\n      });\n      blocks.push({\n        ...block, page,\n      });\n    });\n  }\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,OAAO,GAAG,EAAE;EAElB,IAAIL,IAAI,CAACC,MAAM,EAAE;IACfD,IAAI,CAACC,MAAM,CAACK,OAAO,CAAEC,KAAK,IAAK;MAC7BA,KAAK,CAACL,UAAU,CAACI,OAAO,CAAEE,SAAS,IAAK;QACtCA,SAAS,CAACL,KAAK,CAACG,OAAO,CAAEG,IAAI,IAAK;UAChCA,IAAI,CAACL,KAAK,CAACE,OAAO,CAAEI,IAAI,IAAK;YAC3BA,IAAI,CAACL,OAAO,CAACC,OAAO,CAAEK,GAAG,IAAK;cAC5BN,OAAO,CAACO,IAAI,CAAAC,aAAA,CAAAA,aAAA,KACPF,GAAG;gBAAEX,IAAI;gBAAEO,KAAK;gBAAEC,SAAS;gBAAEC,IAAI;gBAAEC;cAAI,EAC3C,CAAC;YACJ,CAAC,CAAC;YACFN,KAAK,CAACQ,IAAI,CAAAC,aAAA,CAAAA,aAAA,KACLH,IAAI;cAAEV,IAAI;cAAEO,KAAK;cAAEC,SAAS;cAAEC;YAAI,EACtC,CAAC;UACJ,CAAC,CAAC;UACFN,KAAK,CAACS,IAAI,CAAAC,aAAA,CAAAA,aAAA,KACLJ,IAAI;YAAET,IAAI;YAAEO,KAAK;YAAEC;UAAS,EAChC,CAAC;QACJ,CAAC,CAAC;QACFN,UAAU,CAACU,IAAI,CAAAC,aAAA,CAAAA,aAAA,KACVL,SAAS;UAAER,IAAI;UAAEO;QAAK,EAC1B,CAAC;MACJ,CAAC,CAAC;MACFN,MAAM,CAACW,IAAI,CAAAC,aAAA,CAAAA,aAAA,KACNN,KAAK;QAAEP;MAAI,EACf,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,OAAAa,aAAA,CAAAA,aAAA,KACKb,IAAI;IAAEC,MAAM;IAAEC,UAAU;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAO;AAEtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}