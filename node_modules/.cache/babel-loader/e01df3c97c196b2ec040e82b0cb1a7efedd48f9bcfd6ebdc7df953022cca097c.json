{"ast":null,"code":"var _jsxFileName = \"/Users/kaush/Desktop/SplitMate/src/components/ReceiptUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReceiptUploader = ({\n  onDataExtracted\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [fileError, setFileError] = useState('');\n  const fileInputRef = useRef(null);\n  const handleFileChange = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setLoading(true);\n    setFileError('');\n    try {\n      const {\n        data: {\n          text\n        }\n      } = await Tesseract.recognize(file, 'eng');\n\n      // Basic parsing logic\n      const lines = text.split('\\n').map(line => line.trim()).filter(Boolean);\n      const itemRegex = /^(.+?)\\s+(\\d+\\.\\d{2})$/;\n      const parsedItems = [];\n      for (const line of lines) {\n        const match = line.match(itemRegex);\n        if (match) {\n          const itemName = match[1].trim();\n          const price = parseFloat(match[2]);\n          if (!isNaN(price)) {\n            parsedItems.push({\n              name: itemName,\n              price\n            });\n          }\n        }\n      }\n      if (parsedItems.length === 0) {\n        console.warn(\"No items found with given OCR logic.\");\n      }\n\n      // Call onDataExtracted with the parsed items\n      onDataExtracted(parsedItems);\n    } catch (err) {\n      console.error(err);\n      setFileError('Error reading the receipt. Please try another image.');\n    }\n    setLoading(false);\n  };\n  const handleUploadClick = () => {\n    fileInputRef.current.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload Your Receipt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Click the button below to choose an image of your receipt.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      ref: fileInputRef,\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upload-btn\",\n      onClick: handleUploadClick,\n      children: \"Choose File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing OCR... Please wait.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }, this), fileError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: fileError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ReceiptUploader, \"ymdcY4YxKPCjZCJK+andKrc0rL4=\");\n_c = ReceiptUploader;\nexport default ReceiptUploader;\nvar _c;\n$RefreshReg$(_c, \"ReceiptUploader\");","map":{"version":3,"names":["React","useRef","useState","Tesseract","jsxDEV","_jsxDEV","ReceiptUploader","onDataExtracted","_s","loading","setLoading","fileError","setFileError","fileInputRef","handleFileChange","event","file","target","files","data","text","recognize","lines","split","map","line","trim","filter","Boolean","itemRegex","parsedItems","match","itemName","price","parseFloat","isNaN","push","name","length","console","warn","err","error","handleUploadClick","current","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","ref","onChange","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/kaush/Desktop/SplitMate/src/components/ReceiptUploader.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\n\nconst ReceiptUploader = ({ onDataExtracted }) => {\n  const [loading, setLoading] = useState(false);\n  const [fileError, setFileError] = useState('');\n  const fileInputRef = useRef(null);\n\n  const handleFileChange = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setLoading(true);\n    setFileError('');\n\n    try {\n      const { data: { text } } = await Tesseract.recognize(file, 'eng');\n      \n      // Basic parsing logic\n      const lines = text.split('\\n').map(line => line.trim()).filter(Boolean);\n      const itemRegex = /^(.+?)\\s+(\\d+\\.\\d{2})$/;\n      const parsedItems = [];\n\n      for (const line of lines) {\n        const match = line.match(itemRegex);\n        if (match) {\n          const itemName = match[1].trim();\n          const price = parseFloat(match[2]);\n          if (!isNaN(price)) {\n            parsedItems.push({ name: itemName, price });\n          }\n        }\n      }\n\n      if (parsedItems.length === 0) {\n        console.warn(\"No items found with given OCR logic.\");\n      }\n\n      // Call onDataExtracted with the parsed items\n      onDataExtracted(parsedItems);\n\n    } catch (err) {\n      console.error(err);\n      setFileError('Error reading the receipt. Please try another image.');\n    }\n\n    setLoading(false);\n  };\n\n  const handleUploadClick = () => {\n    fileInputRef.current.click();\n  };\n\n  return (\n    <div className=\"upload-area\">\n      <h3>Upload Your Receipt</h3>\n      <p>Click the button below to choose an image of your receipt.</p>\n      <input \n        type=\"file\" \n        accept=\"image/*\" \n        ref={fileInputRef} \n        onChange={handleFileChange} \n      />\n      <button className=\"upload-btn\" onClick={handleUploadClick}>Choose File</button>\n      {loading && <p>Processing OCR... Please wait.</p>}\n      {fileError && <p style={{color:'red'}}>{fileError}</p>}\n    </div>\n  );\n};\n\nexport default ReceiptUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}